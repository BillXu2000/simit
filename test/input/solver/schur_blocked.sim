element Vertex
  f : vector[2](float);
  x : vector[2](float);
  fixed : bool;
end

element Edge
end

element Dirichlet 
  b : vector[2](float);
  l : vector[2](float);
end

extern V : set{Vertex};
extern E : set{Edge}(V,V);
extern D : set{Dirichlet}(V);

func stiffness(e : Edge, v : (Vertex*2)) -> A : matrix[V,V](matrix[2,2](float))
  var fix : matrix[2,2](float) = [2.0, 1.0; 1.0, 2.0];
  var fre  : matrix[2,2](float) = [1.0, 1.0; 1.0, 1.0];
  if (v(0).fixed)
    A(v(0),v(0)) = fix;
  else
    A(v(0),v(0)) = fre;
  end
  if (v(1).fixed)
    A(v(1),v(1)) = fix;
  else
    A(v(1),v(1)) = fre;
  end
  A(v(0),v(1)) = fre;
  A(v(1),v(0)) = fre;
end

func dirichlet(d : Dirichlet, v : (Vertex*1)) -> C : matrix[D,V](matrix[2,2](float))
  C(d,v(0)) = [1.0, 0.0; 0.0, 1.0];
end

export func main()
  A = map stiffness to E reduce +;
  C = map dirichlet to D reduce +;
  println A;
  println C;

  solverA = chol(A);
  t = lltsolve(solverA, V.f);
  T = lltmatsolve(solverA, C');
  B = C*T;
  rhs = C*t - D.b;
  solverB = chol(B);
  l = lltsolve(solverB, rhs);
  V.x = -(T*l) + t;
  cholfree(solverA);
  cholfree(solverB);
end
