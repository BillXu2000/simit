%%% forall
element Point
  a : float;
  b : float;
  c : float;
end

extern points : Point{};

func dist_mass(p : Point) -> (A : tensor[points,points](float))
  A(p,p) = p.a; 
end

proc mul
  A = map dist_mass to points reduce +;
  points.c = A * points.b;
end

%%%-
element Spring
  a : float;
end

element Point
  b : float;
  c : float;
end

extern points  : Point{};
extern springs : Spring[points,points]{};

func dist_mass(s : Spring, p : subsetof points{2}) -> (A : tensor[points,points](float))
  A(p(0), p(1)) = s.a;
end

proc mul
  A = map dist_mass to springs with points reduce +;
  points.c = A * points.b;
end
