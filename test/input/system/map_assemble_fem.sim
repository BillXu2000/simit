element Point
  x : float;
end

element Spring
  u : float;
end

extern points  : set{Point};
extern springs : set{Spring}(points,points);

func trace(A:tensor[3,3](float))->(t:float)
  t = A(0,0)+A(1,1)+A(2,2);
end

func f1(A:tensor[3,3](float))->(t:float)
  t = trace(A) + trace(A) - trace(A);
end

func f(s : Spring, p : (Point*2)) -> (X : tensor[points,points](tensor[3,3](float)))
  F = [1.0,0.0,0.0;0.0,-1.0,0.0;0.0,0.0,1.0];
  F1 = f1(F);
  X(p(0)) = F1;
  X(p(1)) = F1;
end

proc main
  X = map f to springs reduce +;
  A = X + X;
  
end
