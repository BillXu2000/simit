element Point
  b  : float;
  c  : float;
  id : int;
end

element Spring
  a : float;
end

extern points  : set{Point};
extern springs : set{Spring}(points,points);

func f(s : Spring, p : (Point*2)) -> (A : tensor[points,points](float))
  A(p(0),p(0)) =  s.a;
  A(p(0),p(1)) = -s.a;
  A(p(1),p(0)) = -s.a;
  A(p(1),p(1)) =  s.a;
end

func eye(p : Point) -> (I : tensor[points,points](float))
  I(p,p) = 1.0;
end

proc main
  b = points.b;
  A = map   f to springs reduce +;
  I = map eye to points reduce +;

  A = I - 0.01 * A;

  var xguess : tensor[points](float) = 0.0;
  var x : tensor[points](float);

% begin inlined CG
  tol = 1e-6;
  maxiters = 25;
  r = b - (A*xguess);
  p = r;
  iter = 0;
  x = xguess;

  normr2 = r * r';
  while (normr2 > tol) and (iter < maxiters)
    Ap = A * p;
    denom = p * Ap;
    alpha = normr2 / denom;
    x = x + alpha * p;
    normr2old = normr2;
    r = r - alpha * Ap;
    normr2 = r * r';
    beta = normr2 / normr2old;
    p = r + beta * p;
    iter = iter + 1;
  end
% end inlined CG

  points.c = x;
end
