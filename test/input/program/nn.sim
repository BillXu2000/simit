element Node
  inv : float;
  d  : float;
  outv  : float;

  print : float;
end

element Edge
  w : float;
end

extern nodes : set{Node};
extern edges : set{Edge}(nodes, nodes);

func eval(n:Node) -> (v : tensor[nodes](float))
  v(n) = 1.0/(1.0+exp(-n.outv));
end

func deriv(n:Node) -> (d : tensor[nodes](float))
  d(n) = n.outv * (1.0-n.outv);
end

func wMat(e:Edge, n:(Node*2)) -> (W:tensor[nodes, nodes](float))
  W(n(1),n(0)) = e.w;
end

export func main
%  i1 = nodes.inv;

  W = map wMat to edges reduce +;
  nodes.outv = W * nodes.inv;

  outv = map eval to nodes;
  nodes.print = --outv;

%  nodes.outv = outv .* (1.0 - outv);
%  outv = map eval to nodes;
%  nodes.outv = outv;
%  d = map deriv to nodes;
%  dVdw = (d'*W)';
%  dVdw = W'*d;
%  nodes.d = dVdw;
end

