element Point
  x : tensor[3](float);
  v : tensor[3](float);

  fs : tensor[3](float);
  fg : tensor[3](float);
  M : tensor[3](float);
  p : tensor[3](float);
end

element Spring
  m  : float;
  l0 : float;
end

extern points  : set{Point};
extern springs : set{Spring}(points,points);

func distribute_masses(s : Spring, p : (Point*2)) ->
    (M : tensor[points](tensor[3](float)))
  eye = [1.0, 1.0, 1.0]';
  M(p(0)) = 0.5*s.m*eye;
  M(p(1)) = 0.5*s.m*eye;
end

func distribute_gravity(s : Spring, p : (Point*2)) ->
    (f : tensor[points](tensor[3](float)))
  grav = [0.0, 0.0, -9.81]';
  halfm = 0.5*s.m*grav;
  f(p(0)) = halfm;
  f(p(1)) = halfm;
end

func compute_stiffness(s : Spring, p : (Point*2)) ->
    (f : tensor[points](tensor[3](float)))
  stiffness = 3.0;
  dx = p(1).x - p(0).x;
  l = norm(dx);
  f0 = stiffness/(s.l0*s.l0)*(l-s.l0)*dx/l;
  f(p(0)) = f0;
  f(p(1)) = -f0;
end

export func main
  h = 0.01;

  fg = map distribute_gravity to springs reduce +;
  M = map distribute_masses to springs reduce +;
  fs = map compute_stiffness to springs reduce +;

  points.fs = fs;
  points.fg = fg;
  points.M = M;

  % p = M*v + h*(fs + fg);
  points.p = (points.M .* points.v) + (h * (points.fs + points.fg));

  % v = p / diag(M)
  points.v = points.p ./ points.M;

  % x = x + hv
  points.x  = points.x + (h * points.v);
end
