element Point
  x : tensor[3](float);
  v : tensor[3](float);
  m : float;
  fixed : bool;
end

element Spring
  k  : float;
  l0 : float;
end

extern points  : set{Point};
extern springs : set{Spring}(points,points);

func compute_mass_damping(p : Point) ->
    (MD  : tensor[points,points](tensor[3,3](float)),
     fmg : tensor[points](tensor[3](float)))
  h = 1.0e-2;
  viscous = 1.0e-1;
  grav = [0.0, 0.0, -9.81];
  I = [1.0, 0.0, 0.0; 0.0, 1.0, 0.0; 0.0, 0.0, 1.0];
  mass = p.m;
  if p.fixed
    MD(p) = 1.0;
  else
    MD(p) = (mass + h*viscous)*I;
    fmg(p) = mass*p.v + h*mass*grav;
  end
end

func compute_elasticity(s: Spring, p : (Point*2)) ->
    (K  : tensor[points,points](tensor[3,3](float)),
     fe : tensor[points](tensor[3](float)))
  h = 1.0e-2;
  I = [1.0, 0.0, 0.0; 0.0, 1.0, 0.0; 0.0, 0.0, 1.0];
  free0 = not p(0).fixed;
  free1 = not p(1).fixed;
  stiffness = s.k;
  l0 = s.l0;
  % Spring force
  dx = p(1).x - p(0).x;
  l = norm(dx);
  fe0 = h*stiffness/(l0*l0)*(l-l0)*dx/l;
  fe1 = -fe0;
  if free0
    fe(p(0)) = fe0;
  end
  if free1
    fe(p(1)) = fe1;
  end
  % Stiffness matrix
  dxtdx = dx*dx';
  dxdxt = dx'*dx;
  k = h*h*stiffness/(l0*l0*l*l)*(dxdxt + (l-l0)/l*(dxtdx*I - dxdxt));
  if free0 and free1
    K(p(0),p(0)) =  k;
    K(p(0),p(1)) = -k;
    K(p(1),p(0)) = -k;
    K(p(1),p(1)) =  k;
  else
    if free0
      K(p(0),p(0)) = k;
    end
    if free1
      K(p(1),p(1)) = k;
    end
  end
end

proc main
  h = 1.0e-2;

  MD, fmg = map compute_mass_damping to points reduce +;
  K, fe = map compute_elasticity to springs reduce +;

  MDK = MD + K;
  f = fmg + fe;

  % We should not be resetting vguess to zero every time step
  vguess = points.v;
  var v : tensor[points](tensor[3](float));

  tol = 1e-5;
  maxiters = 25;
  r = f - (MDK*vguess);
  p = r;
  iter = 0;
  v = vguess;

  normr2 = r * r';
  while (normr2 > tol) and (iter < maxiters)
    Ap = MDK * p;
    denom = p * Ap;
    alpha = normr2 / denom;
    v = v + alpha * p;
    normr2old = normr2;
    r = r - alpha * Ap;
    normr2 = r * r';
    beta = normr2 / normr2old;
    p = r + beta * p;
    iter = iter + 1;
  end

  points.v = v;
  points.x = points.x + h * points.v;

end
