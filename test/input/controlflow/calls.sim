%%% call 
%! caller(5.0) == 30.0;
func callee(c : float) -> (d : float)
  d = c * 2.0;
end

func caller(a : float) -> (b : float)
  b = callee(a) * 3.0;
end

%%% call-vector
%! caller([1.0, 2.0]) == [9.0, 12.0];
func callee(c : tensor[2](float)) -> (d : tensor[2](float))
  d = c + [5.0, 6.0];
end

func caller(a : tensor[2](float)) -> (b : tensor[2](float))
  b = callee(a) + [3.0, 4.0];
end

%%% call-two-results
%! caller([1.0, 2.0]) == [8.0, 3.0]; 
func callee(c : tensor[2](float)) -> (d : float, e : float)
  d = c(0) * 3.0;
  e = c(1) * 4.0;
end

func caller(a : tensor[2](float)) -> (b : tensor[2](float))
  f, g = callee(a);
  b(0) = g;
  b(1) = f;
end

%%% call-no-results
%! caller([1.0, 2.0]) == [12.0, 10.0];
func callee(inout c : tensor[2](float))
  c(0) = c(0) * 3.0;
end

func caller(a : tensor[2](float)) -> (b : tensor[2](float))
  callee(a);
  b(0) = a(0) * 4.0;
  b(1) = a(1) * 5.0;
end

%%% call-tree
%! caller(1) == 8;
func f1(i : int) -> (b : int)
  b = i * 2;
end

func f2(a : int) -> (b : int)
  b = f1(1) * 3;
end

func caller(a : int) -> (b : int)
  b = f1(1) + f2(1);
end
