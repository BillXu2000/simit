%%% assemble
element Point
  x : tensor[3](float);
end

func edgeVectors(pts : (Point*3)) -> (vec : tensor[3](tensor[3](float)))
  for i in 0:3
    j = mod((i+1), 3);
    vec(i) = pts(j).x - pts(i).x;
  end
end

%%% for_loop_test
%! for_loop_test([1.0, 2.0, 3.0; 4.0, 5.0, 6.0; 7.0, 8.0, 9.0])==[6.0, 15.0 ,24.0];
func for_loop_test(A:tensor[3,3](float)) -> (B:tensor[3](float))
  for i in 0:3
    for j in 0:3
      B(i) = B(i) + A(i,j);
    end
  end
end

%%% empty_for_test (Bug #158)
%! empty_for() == 0;
func empty_for() -> (a : int)
  a = 0;
  for i in 0:0
    for j in 0:3
      for k in 0:0
        a = 42;
      end
    end
  end
end

%%% empty_body
%! empty_body() == 0;
func empty_body() -> (a : int)
  a = 0;
  for i in 0:1
    for j in 0:1
    end
  end
end

%%% while
%! f(5) == 10;
func f(p : int) -> (r : int)
  r = 0;
  while r < 10
    r = r + 2;
  end
end

%%% while-nested
%! f(2) == 11;
func f(p : int) -> (r : int)
  r = 0;
  while r < 10
    while r < 5
      r = r + 1;
    end
    r = r + 2;
  end
end

%%% while-call-cond
%! g(1) == 1;
%! g(2) == 2;
%! g(3) == 4;
func f(p : int) -> (r : int)
  r = p + 1;
end

func g(p : int) -> (r : int)
  r = 1;
  tmp = 0;
  while f(tmp) < p
    r = 2 * r;
    tmp = tmp + 1;
  end
end

%%% do-while
%! g(1) == 2;
%! g(2) == 2;
%! g(3) == 4;
func f(p : int) -> (r : int)
  r = p + 1;
end

func g(p : int) -> (r : int)
  r = 1;
  tmp = 0;
  do
    r = 2 * r;
    tmp = tmp + 1;
  end while f(tmp) < p
end
