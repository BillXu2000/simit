%%% eq-ne-float
%! f(3.14) == 1;
%! f(1.1) == 2;
%! f(2.5) == 3;
func f(p : float) -> (r : int)
  if p == 3.14
    r = 1;
  elif p != 2.5
    r = 2;
  else
    r = 3;
  end
end

%%% gt-lt-ge-le-float
%! f(3.15) == 1;
%! f(3.14) == 2;
%! f(3.13) == 2;
%! f(2.6) == 2;
%! f(2.5) == 2;
%! f(2.4) == 5;
%! f(2.0) == 5;
%! f(1.1) == 5;
%! f(1.0) == 4;
%! f(0.9) == 4;
%! f(0.6) == 4;
%! f(0.5) == 4;
%! f(0.4) == 3;
func f(p : float) -> (r : int)
  if p > 3.14
    r = 1;
  elif p >= 2.5
    r = 2;
  elif p < 0.5
    r = 3;
  elif p <= 1.0
    r = 4;
  else
    r = 5;
  end
end

%%% eq-ne-int
%! f(3) == 1;
%! f(1) == 2;
%! f(2) == 3;
func f(p : int) -> (r : int)
  if p == 3
    r = 1;
  elif p != 2
    r = 2;
  else
    r = 3;
  end
end

%%% gt-lt-ge-le-int
%! f(41) == 1;
%! f(40) == 2;
%! f(39) == 2;
%! f(31) == 2;
%! f(30) == 2;
%! f(29) == 5;
%! f(25) == 5;
%! f(21) == 5;
%! f(20) == 4;
%! f(19) == 4;
%! f(11) == 4;
%! f(10) == 4;
%! f(9) == 3;
func f(p : int) -> (r : int)
  if p > 40
    r = 1;
  elif p >= 30
    r = 2;
  elif p < 10
    r = 3;
  elif p <= 20
    r = 4;
  else
    r = 5;
  end
end

%%% chained-le-lt
%! f(-1) == 5;
%! f(0) == 1;
%! f(1) == 1;
%! f(2) == 3;
%! f(3) == 3;
%! f(4) == 5;
%! f(5) == 5;
func f(p : int) -> (r : int)
  if 0 <= p < 2
    r = 1;
  elif 2 <= p < 4
    r = 3;
  else
    r = 5;
  end
end

%%% and
%! f(42, 3) == 1;
%! f(42, 0) == 2;
%! f(1, 3) == 2;
%! f(3, 42) == 2;
func f(a : int, b : int) -> (r : int)
  if (a == 42) and (b == 3)
    r = 1;
  else
    r = 2;
  end
end

%%% or
%! f(42, 3) == 1;
%! f(42, 0) == 1;
%! f(1, 3) == 1;
%! f(0, 0) == 2;
func f(a : int, b : int) -> (r : int)
  if (a == 42) or (b == 3)
    r = 1;
  else
    r = 2;
  end
end

%%% not
%! f(42) == 2;
%! f(1) == 1;
func f(a : int) -> (r : int)
  if not (a == 42)
    r = 1;
  else
    r = 2;
  end
end

%%% xor
%! f(42, 3) == 2;
%! f(42, 0) == 1;
%! f(1, 3) == 1;
%! f(0, 0) == 2;
func f(a : int, b : int) -> (r : int)
  if (a == 42) xor (b == 3)
    r = 1;
  else
    r = 2;
  end
end
