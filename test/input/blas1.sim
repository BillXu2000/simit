%%% neg
%! neg([0.0, 1.0, 2.0]) == [-0.0, -1.0, -2.0];
func neg(a : Tensor[3](float)) -> (c : Tensor[3](float))
  c = -a;
end

%%% add
%! add([0.0, 1.0, 2.0], [3.0, 4.0, 5.0]) == [3.0, 5.0, 7.0];
func add(a : Tensor[3](float), b : Tensor[3](float)) -> (c : Tensor[3](float))
  c = a + b;
end

%%% sub
%! sub([0.0, 1.0, 2.0], [3.0, 7.0, 1.0]) == [-3.0, -6.0, 1.0];
func sub(a : Tensor[3](float), b : Tensor[3](float)) -> (c : Tensor[3](float))
  c = a - b;
end

%%% mul
func mul(a : Tensor[3](float), b : Tensor[3](float)) -> (c : Tensor[3](float))
  c = a * b;
end

%%% mul-elwise
%! mulelwise([0.0, 1.0, 2.0], [3.0, 7.0, 1.0]) == [0.0, 7.0, 2.0];
func mulelwise(a : Tensor[3](float), b : Tensor[3](float)) -> (c : Tensor[3](float))
  c = a .* b;
end

%%% div-elwise
%! divelwise([0.0, 9.0, 8.0], [3.0, 3.0, 4.0]) == [0.0, 3.0, 2.0];
func divelwise(a : Tensor[3](float), b : Tensor[3](float)) -> (c : Tensor[3](float))
  c = a ./ b;
end

%%% transpose-row2col
%! row2col([0.0, 1.0, 2.0])  == [0.0, 1.0, 2.0]';
func row2col(a : Tensor[3](float)) -> (c : Tensor[3](float)')
  c = a';
end

%%% transpose-col2row
%! col2row([0.0, 1.0, 2.0]') == [0.0, 1.0, 2.0];
func col2row(a : Tensor[3](float)') -> (c : Tensor[3](float))
  c = a';
end

