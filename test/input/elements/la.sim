%%% outer_mul
%! outer_mul([1.0, 2.0, 3.0], [4.0, 5.0, 6.0]') == [32.0, 64.0, 96.0]';
func outer_mul(a : tensor[3](float)', b : tensor[3](float)) -> (c : tensor[3](float))
  c = (a' * a) * b;
end

%%% vec-sub-gemv
%! f([1.0, 2.0]', [3.0, 4.0; 5.0, 6.0], [7.0, 8.0]') == [-52.0, -81.0]';
func f(c : tensor[2](float), A : tensor[2,2](float), b : tensor[2](float)) -> (d : tensor[2](float))
  d = c - A*b;
end

%%% two_adds
%! two_adds([1.0, 2.0, 3.0], [1.1, 2.1, 3.1], [1.2, 2.2, 3.2]) == [3.3, 6.3, 9.3];
func two_adds(a : tensor[3](float)', b : tensor[3](float)', c : tensor[3](float)') -> (e : tensor[3](float)')
  d = a + b;
  e = d + c;
end

%%% eye
%! eye(5.5) == [2.75, 0.0, 0.0; 0.0, 2.75, 0.0; 0.0, 0.0, 2.75];
func eye(m : float) -> (M : tensor[3,3](float))
  I = [1.0, 0.0, 0.0; 0.0, 1.0, 0.0; 0.0, 0.0, 1.0];
  M = 0.5 * m * I;
end

%%% read_result
%! read_result([1.0, 2.0]) == [1.0, 3.0];
func read_result(a : tensor[2](float)') -> (b : tensor[2](float)')
  b(0) = a(0);
  b(1) = b(0) + a(1);
end

%%% gemm
%! gemm([1.0, 2.0, 3.0]) == [1.0, 2.0, 3.0; 2.0, 4.0, 6.0; 3.0, 6.0, 9.0]; 
func gemm(dx : tensor[3](float)') -> (k : tensor[3,3](float))
  I = [1.0, 0.0, 0.0; 0.0, 1.0, 0.0; 0.0, 0.0, 1.0];
  k  = dx'*dx*I;
end

%%% gemm_sub_dot
%! gemm_sub_dot([1.0, 2.0, 3.0]) == [-13.0, -12.0, -11.0; -12.0, -10.0, -8.0; -11.0, -8.0, -5.0];
func gemm_sub_dot(dx : tensor[3](float)') -> (k : tensor[3,3](float))
  I = [1.0, 0.0, 0.0; 0.0, 1.0, 0.0; 0.0, 0.0, 1.0];
  k = dx'*dx*I - dx*dx';
end
