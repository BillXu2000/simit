%%% First piola kirchoff stress
%! PK1(1.0,10.0,[1.0, 0.1, 0.0;0.2, 1.1, 0.1; 0.0, -0.1, 0.9 ]) == [-0.203299, 0.316594, 0.024066; 0.308297, 0.017031, -0.020330; -0.012033, 0.020330, -0.399563 ];
func PK1(u:float, l:float, F:tensor[3,3](float))->(P:tensor[3,3](float))
  JJ = log(det(F));
  Finv = inv(F)';
  P = u*(F-Finv) + l*JJ*Finv;
end

%%% Gradient of first piola kirchoff stress
%! dPdF(1.0,10.0,[1.0, 0.1, 0.0;0.2, 1.1, 0.1; 0.0, -0.1, 0.9 ],[1.0, 2.0, 3.0; 0.0, 0.0, 0.0; 0.0, 0.0, 0.0]) == [7.725282, 0.789449, 2.865494; 1.921653, 4.969785, 0.552198; 3.797480, -1.274178, 6.420995];
func trace3(M:tensor[3,3](float))->(t:float)
  t = M(0,0)+M(1,1)+M(2,2);
end

func dPdF(u:float, l:float, F:tensor[3,3](float), dF:tensor[3,3](float))->
  (dP:tensor[3,3](float))
  JJ = log(det(F));
  Finv = inv(F);
  FidF = Finv*dF;
  dP = u * dF + (u - l*JJ) * Finv' * FidF' + l * trace3(FidF) * Finv';
end

%%%compute stiffness matrix blocks
%- stiffness_blocks(1.0, 10.0 , 0.1666667, [1.0, 0.0, 0.0; 0.0, 1.0, 0.0; 0.0, 0.0, 1.0],[1.0, 0.0, 0.0; 0.0, 1.0, 0.0; 0.0, 0.0, 1.0],[1.0,0.0,0.0])==[[-2.000000, 0.000000, 0.000000; 0.000000, -0.166667, 0.000000; 0.000000, 0.000000, -0.166667], [0.000000, -1.666667, 0.000000; -0.166667, 0.000000, 0.000000; 0.000000, 0.000000, 0.000000], [0.000000, 0.000000, -1.666667; 0.000000, 0.000000, 0.000000; -0.166667, 0.000000, 0.000000], [2.000000, 1.666667, 1.666667; 0.166667, 0.166667, -0.000000; 0.166667, -0.000000, 0.166667]];
func trace3(M:tensor[3,3](float))->(t:float)
  t = M(0,0)+M(1,1)+M(2,2);
end

func dPdF(u:float, l:float, F:tensor[3,3](float), dF:tensor[3,3](float))->
  (dP:tensor[3,3](float))
  JJ = log(det(F));
  Finv = inv(F);
  FidF = Finv*dF;
  dP = u * dF + (u - l*JJ) * Finv' * FidF' + l * trace3(FidF) * Finv';
end

func stiffness_blocks(u:float, l:float, W:float, B:tensor[3,3](float), F:tensor[3,3](float), dFRow:tensor[3](float))
  ->(K:tensor[4,3,3](float))
  var dH:tensor[3,3,3](float)=0.0;
  for kk in 0:3
    var dF:tensor[3,3](float)=0.0;
    for ll in 0:3
      dF(kk,ll) = dFRow(ll);
    end
    tmp = -W*dPdF(u,l,F,dF)*B';
    for ti in 0:3
      for tj in 0:3
        dH(kk,ti,tj) = tmp(ti,tj);
      end
    end
  end
  
  for ii in 0:3
    %loop over dimensions
    for kk in 0:3
      for ll in 0:3
        K(ii,ll,kk) = dH(kk,ll,ii);
      end
    end
  end
  for kk in 0:3
    for ll in 0:3
      K(3, ll, kk) = - (dH(kk, ll, 0) + dH(kk, ll, 1) + dH(kk, ll, 2));
    end
  end
end

%%% fe_stress
%! fe_stress([0.0, 0.0], [1.1, 0.0], [0.0, 1.1],  [0.0, 0.0], [1.0, 0.0], [0.0, 1.0], 10.0, 100.0) == [20.0454545454546, 0.0; 0.0, 20.0454545454546];
%! fe_stress([34.1, 22.0], [35.2, 22.0], [34.1, 23.1],  [31.0, 20.0], [32.0, 20.0], [31.0, 21.0], 10.0, 100.0) == [20.0454545454546, 0.0; 0.0, 20.0454545454546];
func fe_stress(v0x : tensor[2](float)', v1x : tensor[2](float)', v2x : tensor[2](float)',
           v0X : tensor[2](float)', v1X : tensor[2](float)', v2X : tensor[2](float)',
           mu : float, lambda : float)  -> (stress : tensor[2,2](float)) 
  eye2 = [1.0, 0.0; 0.0, 1.0];
  e0 = v1x - v0x;
  e1 = v2x - v0x;
  e2 = v2x - v1x;
  E0 = v1X - v0X;
  E1 = v2X - v0X;
  var F = [0.0, 0.0; 0.0, 0.0];
  F(0,0) = e0(0);
  F(0,1) = e0(1);
  F(1,0) = e1(0);
  F(1,1) = e1(1);

  var m = [0.0, 0.0; 0.0, 0.0];
  m(0,0) = E0(0);
  m(0,1) = E0(1);
  m(1,0) = E1(0);
  m(1,1) = E1(1);

  det2m = m(0,0) * m(1,1) - m(0,1) * m(1,0);

  var inv2m = [0.0, 0.0; 0.0, 0.0];

  d = 1.0/det2m;
  inv2m(0,0) =  m(1,1);
  inv2m(0,1) = -m(0,1);
  inv2m(1,0) = -m(1,0);
  inv2m(1,1) =  m(0,0);
  inv2m = d * inv2m;

  F = F * inv2m;

  E = 0.5 * (F'*F-eye2);
  trace2E = E(0,0) + E(1,1);
  P = mu * E + lambda * trace2E * eye2;
  J = F(0,0) * F(1,1) - F(0,1) * F(1,0);
  stress = (P*F')./J;
end
