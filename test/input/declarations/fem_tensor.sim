%sign for shape function
const sw:tensor[8,3](float) =
[-1.0,-1.0,-1.0;
 -1.0,-1.0, 1.0;
 -1.0, 1.0,-1.0;
 -1.0, 1.0, 1.0;
  1.0,-1.0,-1.0;
  1.0,-1.0, 1.0;
  1.0, 1.0,-1.0;
  1.0, 1.0, 1.0
];

%quadrature weight
const quadW :float = 0.125;

const quadrature : tensor[8,3](float)=
[-0.57735, -0.57735, -0.57735;
 -0.57735, -0.57735,  0.57735;
 -0.57735,  0.57735, -0.57735;
 -0.57735,  0.57735,  0.57735;
  0.57735, -0.57735, -0.57735;
  0.57735, -0.57735,  0.57735;
  0.57735,  0.57735, -0.57735;
  0.57735,  0.57735,  0.57735];

%i vertex index
%kk quadrature index
func shapeFunGrad(kk:int, i:int) -> (gradN:tensor[3](float))
  p = quadrature(kk);
  gradN(0) = sw(i,0) * (1.0 + sw(i,1) * p(1)) * (1.0 + sw(i,2) * p(2));
  gradN(1) = sw(i,1) * (1.0 + sw(i,0) * p(0)) * (1.0 + sw(i,2) * p(2));
  gradN(2) = sw(i,2) * (1.0 + sw(i,0) * p(0)) * (1.0 + sw(i,1) * p(1));
  gradN = 0.25 * gradN;
end

%%% precompute a 3 tensor used in fem
func computeGradN()->(gradN:tensor[8,8,3](float))
  for qq in 0:8
    for ii in 0:8
      tmp = shapeFunGrad(qq,ii);
      for jj in 0:3
        gradN(qq,ii,jj) = tmp(jj);
      end
    end
  end
end
