%require "3.0"
%language "C++"

%defines
%define api.namespace { simit::internal }
%define parser_class_name { Parser }
%define parse.error verbose
%locations
%no-lines

%code requires {
  namespace simit {
  namespace internal {
    class Scanner;
  }}
}

%parse-param { Scanner *scanner }
%parse-param { ParserParams *ctx };

%code {
  #include <stdlib.h>
  #include <cassert>
  #include <iostream>
  #include <algorithm>

  #include "scanner.h"
  #include "util.h"
  using namespace std;
  using namespace simit;  // TODO: Remove
  using namespace simit::internal;

  #define REPORT_ERROR(msg, loc)  \
    do {                          \
      error((loc), (msg));        \
      YYERROR;                    \
    } while (0)

  void Parser::error(const Parser::location_type &loc, const std::string &msg) {
    ctx->errors.push_back(Error(loc.begin.line, loc.begin.column,
                                loc.end.line, loc.end.column,
                                msg));
  }

  #undef yylex
  #define yylex scanner->lex

  static inline std::string convertAndFree(const char *str) {
    std::string result = std::string(str);
    free((void*)str);
    return result;
  }
}

%code requires {
  #include <vector>

  #include "symboltable.h"
  #include "ir.h"
  #include "errors.h"
  #include "types.h"

  namespace simit { namespace internal {
  typedef SymbolTable<std::shared_ptr<IRNode>> ParserSymtableType;

  struct ParserParams {
    ParserParams(ParserSymtableType               *symtable,
                 std::map<std::string, Function*> *functions,
                 std::vector<simit::Error>        *errors,
                 std::vector<Test*>               *tests)
        : symtable(*symtable), functions(*functions), errors(*errors),
          tests(*tests) {}
    ParserSymtableType               &symtable;
    std::map<std::string, Function*> &functions;
    std::vector<simit::Error>        &errors;
    std::vector<Test*>               &tests;
  };
  }}
}

%union {
  // Primitive literals
  int          num;
  double      fnum;
  const char *string;
}
%destructor {} <num> <fnum> <Type>
%destructor { free((void*)($$)); } <string>
%destructor { delete $$; } <*>


// Tokens
%token UNKNOWN

// Literals
%right    "="
%nonassoc "\\"               // solve
%left     "==" "!="
%left     "<" ">" "<=" ">="
%left     "-" "+"
%left     "*" "/"
%left     NEG                // negation
%right    "^"                // exponentiation
%right    "'"                // transpose

%token <num>    INT_LITERAL    "int literal"
%token <fnum>   FLOAT_LITERAL  "float literal"
%token <string> STRING_LITERAL "string literal"
%token <string> IDENT          "identifier"

// Keywords
%token INT       "int"
%token FLOAT     "float"
%token STRUCT    "struct"
%token CONST     "const"
%token EXTERN    "extern"
%token PROC      "proc"
%token FUNC      "func"
%token TENSOR    "Tensor"
%token MAP       "map"
%token TO        "to"
%token WITH      "with"
%token REDUCE    "reduce"
%token WHILE     "while"
%token IF        "if"
%token ELIF      "elif"
%token ELSE      "else"
%token BLOCKEND  "end"
%token RETURN    "return"
%token TEST      "%!"

%token RARROW    "->"
%token LP        "("
%token RP        ")"
%token LB        "["
%token RB        "]"
%token LC        "{"
%token RC        "}"
%token LA        "<"
%token RA        ">"
%token COMMA     ","
%token PERIOD    "."
%token COL       ":"
%token SEMICOL   ";"

%token ASSIGN    "="
%token PLUS      "+"
%token MINUS     "-"
%token STAR      "*"
%token SLASH     "/"
%token EXP       "^"
%token TRANSPOSE "'"
%token BACKSLASH "\\"

%token EQ        "=="
%token NE        "!="
%token LE        "<="
%token GE        ">="

// End of file
%token END 0     "end of file"

%start program
%%

%union {
  std::shared_ptr<simit::internal::IRNode>              *IRNode;
  std::vector<std::shared_ptr<simit::internal::IRNode>> *IRNodes;
};

program
  : /* empty */
  | program program_element

%type<IRNode> program_element;
program_element
  : struct {
    $$ = NULL;
  }
  | procedure {
    $$ = NULL;
  }
  | function {
    std::unique_ptr<Function> function($function);

    auto name = function->getName();
    if (ctx->functions.find(name) != ctx->functions.end()) {
      REPORT_ERROR("function redefinition (" + name + ")", @function);
    }
    ctx->functions[name] = function.release();
  }
  | extern {
    $$ = NULL;
  }
  | stmt {
    $$ = NULL;
    delete $stmt;
  }
  | test {
    ctx->tests.push_back($test);
  }

// Externs
extern
  : "extern" IDENT type "{" "}" ";" {
    free((void*)$IDENT);
    delete $type;
  }
  | "extern" IDENT type "[" endpoints "]" "{" "}" ";" {
    free((void*)$IDENT);
    delete $type;
  }

endpoints
  : IDENT {
    free((void*)$IDENT);
  }
  | endpoints "," IDENT {
    free((void*)$IDENT);
  }


// Structs
struct
  : "struct" IDENT struct_decl_block {
    free((void*)$IDENT);
  }

struct_decl_block
  : /* empty */
  | struct_decl_list BLOCKEND

struct_decl_list
  : /* empty */
  | field_decl struct_decl_list

field_decl
  : var_decl  ";"


// Procedures and functions
%union {
  Function *Function;
};

%type <Function> procedure;
procedure
  : PROC IDENT stmt_block BLOCKEND {
    free((void*)$IDENT);
    delete $stmt_block;
  }

%type <Function> function;
function
  : function_header stmt_block BLOCKEND {
    auto statements = unique_ptr<vector<shared_ptr<IRNode>>>($stmt_block);
    $$ = $function_header;
    $$->addStatements(*statements);
    ctx->symtable.unscope();
  }

%type <Function> function_header;
function_header
  : FUNC IDENT "(" arguments ")" results {
    string ident($IDENT);
    free((void*)$IDENT);
    auto arguments = unique_ptr<vector<shared_ptr<Argument>>>($arguments);
    auto results = unique_ptr<vector<shared_ptr<Result>>>($results);

    $$ = new Function(ident, *arguments, *results);

    ctx->symtable.scope();
    for (auto argument : *arguments) {
      ctx->symtable.insert(argument->getName(), argument);
    }

    for (auto result : *results) {
      ctx->symtable.insert(result->getName(), result);
    }
  }

%code requires {
  namespace {
  struct FormalData {
    std::string name;
    simit::internal::TensorType *type;
    FormalData(const std::string &name, simit::internal::TensorType *type)
        : name(name), type(type){}
  };
  }
};

%union {
  FormalData                                *Formal;
  simit::util::OwnershipVector<FormalData*> *Formals;
  std::vector<std::shared_ptr<Argument>>    *Arguments;
  std::vector<std::shared_ptr<Result>>      *Results;
};

%type <Arguments> arguments;
arguments
  : /* empty */ {
    $$ = new vector<shared_ptr<Argument>>();
  }
  | formal_list {
    $$ = new vector<shared_ptr<Argument>>();
    for (auto formal : *$formal_list) {
      auto result = new Argument(formal->name, formal->type);
      $$->push_back(shared_ptr<Argument>(result));
    }
    delete $formal_list;
 }

%type <Results> results;
results
  : /* empty */ {
    $$ = new vector<shared_ptr<Result>>();
    $$->push_back(shared_ptr<Result>(new Result("asd", NULL)));
  }
  | RARROW "(" formal_list ")" {
    $$ = new vector<shared_ptr<Result>>();
    for (auto formal : *$formal_list) {
      auto result = new Result(formal->name, formal->type);
      $$->push_back(shared_ptr<Result>(result));
    }
    delete $formal_list;
  }

%type <Formal> formal_decl;
formal_decl
  : IDENT ":" type {
    string ident($IDENT);
    free((void*)$IDENT);
    $$ = new FormalData(ident, $type);
  }

%type <Formals> formal_list;
formal_list
  : formal_decl {
    $$ = new simit::util::OwnershipVector<FormalData *>();
    $$->push_back($formal_decl);
  }
  | formal_list "," formal_decl {
    $$->push_back($formal_decl);
  }

// Statements
%type<IRNodes> stmt_block;
stmt_block
  : /* empty */ {
    $$ = new vector<shared_ptr<IRNode>>();
  }
  | stmt_block stmt {
    $$ = $1;
    if ($stmt == NULL) break;  // TODO: Remove check
    $$->insert($$->end(), $stmt->begin(), $stmt->end());
    delete $stmt;
  }

%type<IRNodes> stmt;
stmt
  : const_stmt
  | if_stmt
  | return_stmt
  | assign_stmt
  | expr_stmt

%type<IRNodes> const_stmt;
const_stmt
  : "const" IDENT ":" tensor_type "=" tensor_literal ";" {
    auto tensorType = unique_ptr<TensorType>($tensor_type);

    auto tensorLiteral = shared_ptr<Literal>(*$tensor_literal);
    delete $tensor_literal;

    tensorLiteral->setName($IDENT);
    free((void*)$IDENT);

    // If $type is a 1xn matrix and $tensor_literal is a vector then we cast
    // $tensor_literal to a 1xn matrix.
    if (tensorType->getOrder() == 2 && tensorLiteral->getOrder() == 1) {
      tensorLiteral->cast(tensorType.release());
    }

    // Typecheck: value and literal types must be equivalent.
    //            Note that the use of $tensor_type is deliberate as tensorType
    //            can have been released.
    if (*$tensor_type != *(tensorLiteral->getType())) {
      stringstream ss;
      ss << "attempting to assign to a variable of type " << *$tensor_type
         << " a literal of type " << *(tensorLiteral->getType());
      REPORT_ERROR(ss.str(), @5);
    }

    ctx->symtable.insert(tensorLiteral->getName(), tensorLiteral);

    $$ = new vector<shared_ptr<IRNode>>();
    $$->push_back(tensorLiteral);
  }
  | "const" IDENT ":" element_type "=" element_literal ";" {
    free((void*)$IDENT);
    delete $element_type;
    $$ = NULL;
  }

%type<IRNodes> if_stmt;
if_stmt
  : "if" expr stmt_block else_clauses BLOCKEND {
    $$ = NULL;
    delete $2;
    delete $3;
  }

else_clauses
  : /* empty */
  | elif_clauses "else" stmt_block {
    delete $3;
  }

elif_clauses
  : /* empty */
  | elif_clauses "elif" expr stmt_block {
    delete $3;
    delete $4;
  }

%type<IRNodes> return_stmt;
return_stmt
  : "return" ";" {
    $$ = NULL;
  }

%type<IRNodes> assign_stmt;
assign_stmt
  : lhs_expr_list "=" expr_list ";" {
    auto lhsList = unique_ptr<VariableAccessVector>($lhs_expr_list);
    auto rhsList = unique_ptr<vector<shared_ptr<TensorNode>>>($expr_list);

    $$ = new vector<shared_ptr<IRNode>>();

    if (lhsList->size() > rhsList->size()) {
      // TODO: Handle maps and then reintroduce this error
      // REPORT_ERROR("too few expressions assigned to too many variables", @2);
      break;
    }
    else if (lhsList->size() < rhsList->size()) {
      REPORT_ERROR("too many expressions assigned to too few variables", @2);
    }

    auto lhsIter = lhsList->begin();
    auto rhsIter = rhsList->begin();
    for (; lhsIter != lhsList->end(); ++lhsIter, ++rhsIter) {
      auto lhs = *lhsIter;
      auto rhs = *rhsIter;

      // TODO: Remove these checks
      if (rhs == NULL) continue;
      if (!ctx->symtable.contains(lhs->name)) continue;

      auto lhsTensor = ctx->symtable.get(lhs->name);
      if (auto result = dynamic_pointer_cast<Result>(lhsTensor)) {
        rhs->setName(result->getName() + "_val");
        auto store = new VariableStore(result, rhs);
        auto storePtr = std::shared_ptr<Store>(store);
        result->setValue(storePtr);
        $$->push_back(storePtr);
      }
      else {
        NOT_SUPPORTED_YET;
      }
    }
  }

%type<IRNodes> expr_stmt;
expr_stmt
  : ";" {
    $$ = NULL;
  }
  | expr ";" {
    $$ = NULL;
  }


// Expressions
%union {
  std::shared_ptr<simit::internal::TensorNode>              *Tensor;
  std::vector<std::shared_ptr<simit::internal::TensorNode>> *TensorList;

};

%type<Tensor> expr;
expr
  : IDENT {
    string ident($IDENT);
    free((void*)$IDENT);
    if (!ctx->symtable.contains(ident)) {
      // TODO: reintroduce error
      // REPORT_ERROR(ident + " is not defined in scope", @1);
      $$ = NULL;
      break;
    }

    std::shared_ptr<IRNode> &node = ctx->symtable.get(ident);

    shared_ptr<TensorNode> tensor = dynamic_pointer_cast<TensorNode>(node);
    if (tensor == NULL) {
      REPORT_ERROR(ident + " is not a tensor", @1);
    }

    $$ = new shared_ptr<TensorNode>(tensor);
  }
  | literal {
    $$ = $literal;
  }
  | STRING_LITERAL {
    $$ = NULL;
  }
  | expr "\\" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr "+" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr "-" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr "*" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr "/" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | "-" expr %prec NEG {
    if ($2 == NULL) {  // TODO: Remove check
      $$ = NULL;
      break;
    }

    auto expr = shared_ptr<TensorNode>(*$2);
    delete $2;

    IndexVarFactory indexVarFactory;
    std::vector<IndexExpr::IndexVarPtr> indexVars;
    for (unsigned int i=0; i<expr->getOrder(); ++i) {
      IndexSetProduct indexSet = expr->getType()->getDimensions()[0];
      indexVars.push_back(indexVarFactory.makeFreeVar(indexSet));
    }

    std::vector<IndexExpr::IndexedTensor> operands;
    operands.push_back(IndexExpr::IndexedTensor(expr, indexVars));

    auto indexExpr = new IndexExpr(indexVars, IndexExpr::NEG, operands);

    assert(indexExpr != NULL);
    $$ = new shared_ptr<TensorNode>(indexExpr);
  }
  | expr "'" {
    $$ = NULL;
    delete $1;
  }
  | expr "^" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr "==" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr "!=" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr "<"  expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr ">"  expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr "<=" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr ">=" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | "(" expr ")" {
    $$ = NULL;
    delete $2;
  }
  | expr ":" expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | expr "." expr {
    $$ = NULL;
    delete $1;
    delete $3;
  }
  | call_expr {
    $$ = NULL;
  }
  | index_expr {
    $$ = NULL;
  }
  | map_expr {
    $$ = NULL;
  }

%union {
  std::shared_ptr<Call> *Call;
};
%type<Call> call_expr;
call_expr
  : IDENT "(" actual_list ")" {
    std::string name = convertAndFree($1);
    auto call = new Call(name, *$actual_list);
    delete $actual_list;
    $$ = new std::shared_ptr<Call>(call);
  }

%type <TensorList> actual_list;
actual_list
  : /* empty */ {
    $$ = new vector<shared_ptr<TensorNode>>();
  }
  | expr_list {
    $$ = $expr_list;
  }

%type <TensorList> expr_list;
expr_list
  : expr {
    $$ = new std::vector<std::shared_ptr<TensorNode>>();
    if ($expr == NULL) break;  // TODO: Remove check
    $$->push_back(*$expr);
    delete $expr;
  }
  | expr_list "," expr {
    $$ = $1;
    if ($expr == NULL) break;  // TODO: Remove check
    $$->push_back(*$expr);
    delete $expr;
  }

// Map expressions
map_expr
  : "map" IDENT "to" IDENT with reduce {
    string function($2);
    string target($4);
    free((void*)$2);
    free((void*)$4);
  }

with
  : /* empty */
  | "with" IDENT {
    string neighbor($IDENT);
    free((void*)$IDENT);
  }

reduce
  : /* empty */
  | "reduce" reduction_op


// Index expressions
index_expr
  : reduction_indices expr

reduction_indices
  : /* empty */
  | reduction_indices reduction_index

reduction_index
  : reduction_op IDENT {
    free((void*)$IDENT);
  }
  | reduction_op "{" IDENT "}" {
    free((void*)$IDENT);
  }
  | IDENT "{" IDENT "}" {
    free((void*)$1);
    free((void*)$3);
  }

reduction_op
  : "+"
  | "*"


// Lhs expressions
%code requires {
  namespace {
  // This struct describe variable accesses.
  struct VariableAccess {
    std::string name;
  };

  typedef simit::util::OwnershipVector<VariableAccess*> VariableAccessVector;
  }
};

%union {
  VariableAccess       *VarAccess;
  VariableAccessVector *VarAccesses;
};

%type<VarAccesses> lhs_expr_list;
lhs_expr_list
  : lhs_expr {
    $$ = new VariableAccessVector();
    if ($lhs_expr == NULL) break;  // TODO: Remove check
    $$->push_back($lhs_expr);
  }
  | lhs_expr_list "," lhs_expr {
    $$ = $1;
    if ($lhs_expr == NULL) break;  // TODO: Remove check
    $$->push_back($lhs_expr);
  }

%type<VarAccess> lhs_expr;
lhs_expr
  : IDENT {
    std::string name = convertAndFree($IDENT);
    auto variableStore = new VariableAccess;
    variableStore->name = name;
    $$ = variableStore;
  }
  | IDENT "(" expr_list ")" {
    std::string name = convertAndFree($IDENT);
    $$ = NULL;
    delete $expr_list;
  }
  | IDENT "." IDENT {
    std::string name = convertAndFree($1);
    std::string field = convertAndFree($3);
    $$ = NULL;
  }


// Variables
var_decl
  : IDENT ":" type {
    delete $type;
    free((void*)$IDENT);
  }


// Types
%union {
  TensorType                         *TensorType;
  Type                               Type;

  std::vector<IndexSetProduct> *IndexSetProducts;
  std::vector<IndexSet>        *IndexSets;
  IndexSet                     *IndexSet;
};

%type <TensorType>       type;
%type <TensorType>       tensor_type;

%type <IndexSetProducts> nested_dimensions;

%type <IndexSets>        dimensions;
%type <IndexSet>         dimension;

%type <Type>    component_type;
%type <TensorType>       element_type;

type
  : element_type {
    $$ = $element_type;
  }
  | tensor_type {
    $$ = $tensor_type;
  }

element_type
  : IDENT {
    free((void*)$IDENT);
    $$ = new TensorType(Type::ELEMENT);
  }

tensor_type
  : component_type {
    $$ = new TensorType($component_type);
  }
  | TENSOR nested_dimensions "(" component_type ")" {
    $$ = new TensorType($component_type, *$nested_dimensions);
    delete $nested_dimensions;
  }

nested_dimensions
  : /* empty */ {
    $$ = new std::vector<IndexSetProduct>();
  }
  | nested_dimensions "[" dimensions "]" {
    $$ = $1;

    auto parentDims = $$;
    auto childDims = unique_ptr<std::vector<IndexSet>>($dimensions);

    // If there are no previous dimensions then create IndexSetProducts
    if (parentDims->size() == 0) {
      for (auto &dim : *childDims) {
        UNUSED(dim);
        parentDims->push_back(IndexSetProduct());
      }
    }

    // Handle case where there are more child than parent dimensions
    if (childDims->size() > parentDims->size()) {
      for (size_t i=0; i < childDims->size() - parentDims->size(); ++i) {
        size_t numNestings = (*parentDims)[0].getIndexSets().size();
        std::vector<IndexSet> indexSets(numNestings, IndexSet(1));
        parentDims->push_back(IndexSetProduct(indexSets));
      }
    }

    // Handle case where there are more parent than child dimensions
    if (parentDims->size() > childDims->size()) {
      for (size_t i=0; i < parentDims->size() - childDims->size(); ++i) {
        childDims->push_back(IndexSet(1));
      }
    }

    // Multiply each dimension with the corresponding dimension in the shape.
    assert(childDims->size() == parentDims->size());
    for (size_t i=0; i<$$->size(); ++i) {
      (*parentDims)[i] = (*parentDims)[i] * (*childDims)[i];
    }
  }

dimensions
  : dimension {
    $$ = new std::vector<IndexSet>();
    $$->push_back(*$dimension);
    delete $dimension;
  }
  | dimensions "," dimension {
    $$ = $1;
    $$->push_back(*$dimension);
    delete $dimension;
  }

dimension
  : INT_LITERAL {
    $$ = new IndexSet($INT_LITERAL);
  }
  | IDENT {
    string ident = convertAndFree($IDENT);
    $$ = new IndexSet(123456789);  // TODO: This needs to be a set dimension
  }
  | "*" {
    $$ = new IndexSet();
  }

component_type
  : INT {
    $$ = Type::INT;
  }
  | FLOAT {
    $$ = Type::FLOAT;
  }


// Literals
%code requires {
  namespace {
    template <typename T>
    class TensorValues {
     public:
      TensorValues() : dimSizes(1) {};

      void addValue(const T &val) {
        values.push_back(val);
        dimSizes[dimSizes.size()-1]++;
      }
      void addDimension() { dimSizes.push_back(1); }

      bool dimensionsMatch(const TensorValues<T> &other, std::string *errors) {
        assert(errors != NULL);
        std::string mismatchError = "missmatched dimension sizes";
        if (dimSizes.size()-1 != other.dimSizes.size()) {
          *errors = mismatchError;
          return false;
        }

        for (unsigned int i=0; i<dimSizes.size()-1; ++i) {
          if (dimSizes[i] != other.dimSizes[i]) {
            *errors = mismatchError;
            return false;
          }
        }
        return true;
      }

      void merge(const TensorValues<T> &other) {
        values.insert(values.end(), other.values.begin(), other.values.end());
        dimSizes[dimSizes.size()-1]++;
      }

      std::vector<unsigned int> dimSizes;
      std::vector<T>            values;
    };
  }
};

%union {
  std::shared_ptr<Literal> *Literal;
  TensorValues<double>     *TensorDoubleValues;
  TensorValues<int>        *TensorIntValues;
};

%type <Tensor>  literal;
%type <Literal> tensor_literal;
%type <Literal> dense_tensor_literal;
%type <Literal> scalar_literal;

%type <TensorDoubleValues> float_dense_tensor_literal;
%type <TensorDoubleValues> float_dense_ndtensor_literal;
%type <TensorDoubleValues> float_dense_matrix_literal;
%type <TensorDoubleValues> float_dense_vector_literal;

%type <TensorIntValues> int_dense_tensor_literal;
%type <TensorIntValues> int_dense_ndtensor_literal;
%type <TensorIntValues> int_dense_matrix_literal;
%type <TensorIntValues> int_dense_vector_literal;

literal
  : element_literal
  | tensor_literal

element_literal
  :

tensor_literal
  : dense_tensor_literal
  | scalar_literal

dense_tensor_literal
  : "[" float_dense_tensor_literal "]" {
    auto values = unique_ptr<TensorValues<double>>($2);
    auto isps = std::vector<IndexSetProduct>(values->dimSizes.rbegin(),
                                             values->dimSizes.rend());
    auto type = new TensorType(Type::FLOAT, isps);
    auto literal = new Literal(type, values->values.data());
    $$ = new shared_ptr<Literal>(literal);
  }
  | "[" int_dense_tensor_literal "]" {
    auto values = unique_ptr<TensorValues<int>>($2);
    auto isps = std::vector<IndexSetProduct>(values->dimSizes.rbegin(),
                                             values->dimSizes.rend());
    auto type = new TensorType(Type::INT, isps);
    auto literal = new Literal(type, values->values.data());
    $$ = new shared_ptr<Literal>(literal);
  }

float_dense_tensor_literal
  : float_dense_matrix_literal {
    // If the matrix has only one column then we discard that dimension and
    // treat it as a vector.
    if ($1->dimSizes[$1->dimSizes.size()-1] == 1) {
      $1->dimSizes.pop_back();
    }
  }
  | float_dense_ndtensor_literal

float_dense_ndtensor_literal
  : "[" float_dense_matrix_literal "]" {
    $$ = $2;
    $$->addDimension();
  }
  | float_dense_ndtensor_literal "," "[" float_dense_matrix_literal "]" {
    auto  left = unique_ptr<TensorValues<double>>($1);
    auto right = unique_ptr<TensorValues<double>>($4);

    string errorStr;
    if(!left->dimensionsMatch(*right, &errorStr)) {
      REPORT_ERROR(errorStr, @2);
    }
    left->merge(*right);
    $$ = left.release();
  }

float_dense_matrix_literal
  : float_dense_vector_literal {
    $$ = $1;
    $$->addDimension();
  }
  | float_dense_matrix_literal ";" float_dense_vector_literal {
    auto  left = unique_ptr<TensorValues<double>>($1);
    auto right = unique_ptr<TensorValues<double>>($3);

    string errorStr;
    if(!left->dimensionsMatch(*right, &errorStr)) {
      REPORT_ERROR(errorStr, @2);
    }

    left->merge(*right);
    $$ = left.release();
  }

float_dense_vector_literal
  : FLOAT_LITERAL {
    $$ = new TensorValues<double>();
    $$->addValue($1);
  }
  | float_dense_vector_literal "," FLOAT_LITERAL {
    $$ = $1;
    $$->addValue($3);
  }

int_dense_tensor_literal
  : int_dense_matrix_literal {
    // If the matrix has only one column then we discard that dimension and
    // treat it as a vector.
    if ($1->dimSizes[$1->dimSizes.size()-1] == 1) {
      $1->dimSizes.pop_back();
    }
  }
  | int_dense_ndtensor_literal

int_dense_ndtensor_literal
  : "[" int_dense_matrix_literal "]" {
    $$ = $2;
    $$->addDimension();
  }
  | int_dense_ndtensor_literal "," "[" int_dense_matrix_literal "]" {
    auto  left = unique_ptr<TensorValues<int>>($1);
    auto right = unique_ptr<TensorValues<int>>($4);

    string errorStr;
    if(!left->dimensionsMatch(*right, &errorStr)) {
      REPORT_ERROR(errorStr, @2);
    }
    left->merge(*right);
    $$ = left.release();
  }

int_dense_matrix_literal
  : int_dense_vector_literal {
    $$ = $1;
    $$->addDimension();
  }
  | int_dense_matrix_literal ";" int_dense_vector_literal {
    auto  left = unique_ptr<TensorValues<int>>($1);
    auto right = unique_ptr<TensorValues<int>>($3);

    string errorStr;
    if(!left->dimensionsMatch(*right, &errorStr)) {
      REPORT_ERROR(errorStr, @2);
    }

    left->merge(*right);
    $$ = left.release();
  }

int_dense_vector_literal
  : INT_LITERAL {
    $$ = new TensorValues<int>();
    $$->addValue($1);
  }
  | int_dense_vector_literal "," INT_LITERAL {
    $$ = $1;
    $$->addValue($3);
  }

scalar_literal
  : INT_LITERAL {
    auto scalarType = new TensorType(Type::INT);
    auto literal = new Literal(scalarType, &$1);
    $$ = new shared_ptr<Literal>(literal);
  }
  | FLOAT_LITERAL {
    auto scalarType = new TensorType(Type::FLOAT);
    auto literal = new Literal(scalarType, &$1);
    $$ = new shared_ptr<Literal>(literal);
  }

// Tests
%union { Test *Test; };
%type <Test> test;
test
  : "%!" call_expr "==" tensor_literal ";" {
    $$ = new Test(*$call_expr, *$tensor_literal);
    delete $call_expr;
    delete $tensor_literal;
  }

%%
