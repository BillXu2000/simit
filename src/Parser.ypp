%{
  #include "Logger.h"
  #include "Frontend.h"
  #include "IR.h"
  #include <stdlib.h>
  #include <assert.h>
  #include <iostream>
  using namespace Simit;
  using namespace std;
%}

%require "3.0.0"

%define parse.error verbose
%define parse.lac full
%locations
%pure-parser

%parse-param{Simit::IRNode **irNode}{std::string *errors}
%start input

%union {
  int    num;
  double fnum;
  const  char *string;
}
%destructor { free((void*)($$)); } <string>

%{
  #include "Scanner.h"
  void yyerror(YYLTYPE * loc, Simit::IRNode **irNode,
               std::string *errors, const char *s);
%}

%token UNKNOWN

// Literals
%token <num>    INT_LITERAL    "int literal"
%token <fnum>   FLOAT_LITERAL  "float literal"
%token <string> STRING_LITERAL "string literal"
%token <string> IDENT          "identifier"

%left "-" "+"
%left "*" "/"
%left NEG     /* negation--unary minus */
%right "^"    /* exponentiation        */

// Keywords
%token INT       "int"
%token FLOAT     "float"
%token STRUCT    "struct"
%token CONST     "const"
%token EXTERN    "extern"
%token PROC      "proc"
%token FUNC      "func"
%token TENSOR    "Tensor"
%token MAP       "map"
%token TO        "to"
%token WITH      "with"
%token REDUCE    "reduce"
%token WHILE     "while"
%token IF        "if"
%token ELIF      "elif"
%token ELSE      "else"
%token BLOCKEND  "end"

%token NEWLINE   "newline"
%token LP        "("
%token RP        ")"
%token LB        "["
%token RB        "]"
%token LC        "{"
%token RC        "}"
%token COMMA     ","
%token COL       ":"
%token SEMICOL   ";"

%token ASSIGN    "="
%token PLUS      "+"
%token MINUS     "-"
%token STAR      "*"
%token SLASH     "/"
%token EXP       "^"
%token BACKSLASH "\\"
%token RARROW    "->"

// End of file
%token END 0 "end of file"

%%

input
  : /* empty */
  | input procedure
  | input function

procedure
  : PROC IDENT block_stmt

function
  : function_header block_stmt

function_header
  : FUNC IDENT "(" param_list ")" results

results
  : /* empty */
  | RARROW "(" param_list ")"

param_list
  : /* empty */
  | param_decl
  | param_decl "," param_list

param_decl
  : IDENT ":" type

type
  : tensor_type

tensor_type
  : TENSOR shape  "(" scalar_type ")" { }

shape
  : /* empty */
  | shape "[" dimension_list "]"

dimension_list
  : dimension
  | dimension_list dimension

dimension
  : INT_LITERAL
  | IDENT

scalar_type
  : INT
  | FLOAT

block_stmt
  : stmt_list BLOCKEND

stmt_list
  : /* empty */
  | stmt_list stmt

stmt
  : expr_stmt

expr_stmt
  : ";"
  | expr ";"

expr
  : IDENT
  | FLOAT_LITERAL
  | INT_LITERAL
  | STRING_LITERAL
  | expr "=" expr
  | expr "+" expr
  | expr "-" expr
  | expr "*" expr
  | expr "/" expr
  | "-" expr %prec NEG
  | expr "^" expr
  | "(" expr ")"
  | expr "[" expr "]"
  | index_expression

index_expression
  : reduction_indices expr

reduction_indices
  : /* empty */
  | reduction_indices reduction_index

reduction_index
  : reduction_op IDENT
  | reduction_op "{" IDENT "}"
  | IDENT "{" IDENT "}"

reduction_op
  : "+"
  | "-"

%%

void yyerror(YYLTYPE *loc, Simit::IRNode **irNode,
             std::string *errors, const char *s) {
  *errors = string(s) + " at " + to_string(loc->first_line) + ":" +
            to_string(loc->first_column);
}
